{"version":3,"file":"callMedia.js","sourceRoot":"","sources":["../../../../../src/generated/src/operationsInterfaces/callMedia.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport {\n  PlayRequest,\n  CallMediaPlayOptionalParams,\n  CallMediaCancelAllMediaOperationsOptionalParams,\n  RecognizeRequest,\n  CallMediaRecognizeOptionalParams,\n  ContinuousDtmfRecognitionRequest,\n  CallMediaStartContinuousDtmfRecognitionOptionalParams,\n  CallMediaStopContinuousDtmfRecognitionOptionalParams,\n  SendDtmfTonesRequest,\n  CallMediaSendDtmfTonesOptionalParams,\n  CallMediaSendDtmfTonesResponse,\n  HoldRequest,\n  CallMediaHoldOptionalParams,\n  UnholdRequest,\n  CallMediaUnholdOptionalParams,\n} from \"../models/index.js\";\n\n/** Interface representing a CallMedia. */\nexport interface CallMedia {\n  /**\n   * Plays audio to participants in the call.\n   * @param callConnectionId The call connection id.\n   * @param playRequest play request payload.\n   * @param options The options parameters.\n   */\n  play(\n    callConnectionId: string,\n    playRequest: PlayRequest,\n    options?: CallMediaPlayOptionalParams,\n  ): Promise<void>;\n  /**\n   * Cancel all media operations in a call.\n   * @param callConnectionId The call connection id\n   * @param options The options parameters.\n   */\n  cancelAllMediaOperations(\n    callConnectionId: string,\n    options?: CallMediaCancelAllMediaOperationsOptionalParams,\n  ): Promise<void>;\n  /**\n   * Recognize media from call.\n   * @param callConnectionId The call connection id\n   * @param recognizeRequest The media recognize request\n   * @param options The options parameters.\n   */\n  recognize(\n    callConnectionId: string,\n    recognizeRequest: RecognizeRequest,\n    options?: CallMediaRecognizeOptionalParams,\n  ): Promise<void>;\n  /**\n   * Start continuous Dtmf recognition by subscribing to tones.\n   * @param callConnectionId The call connection id\n   * @param continuousDtmfRecognitionRequest The continuous recognize request\n   * @param options The options parameters.\n   */\n  startContinuousDtmfRecognition(\n    callConnectionId: string,\n    continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest,\n    options?: CallMediaStartContinuousDtmfRecognitionOptionalParams,\n  ): Promise<void>;\n  /**\n   * Stop continuous Dtmf recognition by unsubscribing to tones.\n   * @param callConnectionId The call connection id\n   * @param continuousDtmfRecognitionRequest The continuous recognize request\n   * @param options The options parameters.\n   */\n  stopContinuousDtmfRecognition(\n    callConnectionId: string,\n    continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest,\n    options?: CallMediaStopContinuousDtmfRecognitionOptionalParams,\n  ): Promise<void>;\n  /**\n   * Send dtmf tones.\n   * @param callConnectionId The call connection id\n   * @param sendDtmfTonesRequest The send dtmf tones request\n   * @param options The options parameters.\n   */\n  sendDtmfTones(\n    callConnectionId: string,\n    sendDtmfTonesRequest: SendDtmfTonesRequest,\n    options?: CallMediaSendDtmfTonesOptionalParams,\n  ): Promise<CallMediaSendDtmfTonesResponse>;\n  /**\n   * Hold participant from the call using identifier.\n   * @param callConnectionId The call connection id.\n   * @param holdRequest The participants to be hold from the call.\n   * @param options The options parameters.\n   */\n  hold(\n    callConnectionId: string,\n    holdRequest: HoldRequest,\n    options?: CallMediaHoldOptionalParams,\n  ): Promise<void>;\n  /**\n   * Unhold participants from the call using identifier.\n   * @param callConnectionId The call connection id.\n   * @param unholdRequest The participants to be hold from the call.\n   * @param options The options parameters.\n   */\n  unhold(\n    callConnectionId: string,\n    unholdRequest: UnholdRequest,\n    options?: CallMediaUnholdOptionalParams,\n  ): Promise<void>;\n}\n"]}