{"version":3,"file":"callAutomationClient.js","sourceRoot":"","sources":["../../src/callAutomationClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { CommonClientOptions } from \"@azure/core-client\";\nimport { InternalPipelineOptions } from \"@azure/core-rest-pipeline\";\nimport {\n  parseClientArguments,\n  isKeyCredential,\n  createCommunicationAuthPolicy,\n  CommunicationIdentifier,\n  CommunicationUserIdentifier,\n} from \"@azure/communication-common\";\nimport { logger } from \"./models/logger.js\";\nimport {\n  AnswerCallRequest,\n  CallAutomationApiClient,\n  CommunicationUserIdentifierModel,\n  ConnectRequest,\n  CreateCallRequest,\n  RedirectCallRequest,\n  RejectCallRequest,\n} from \"./generated/src/index.js\";\nimport { CallConnection } from \"./callConnection.js\";\nimport { CallRecording } from \"./callRecording.js\";\nimport {\n  AnswerCallOptions,\n  ConnectCallOptions,\n  CreateCallOptions,\n  RedirectCallOptions,\n  RejectCallOptions,\n} from \"./models/options.js\";\nimport { AnswerCallResult, ConnectCallResult, CreateCallResult } from \"./models/responses.js\";\nimport { CallConnectionProperties, CallInvite, CallLocator } from \"./models/models.js\";\nimport {\n  communicationIdentifierConverter,\n  communicationIdentifierModelConverter,\n  communicationUserIdentifierConverter,\n  communicationUserIdentifierModelConverter,\n  phoneNumberIdentifierConverter,\n  PhoneNumberIdentifierModelConverter,\n} from \"./utli/converters.js\";\nimport { randomUUID } from \"@azure/core-util\";\n\n/**\n * Client options used to configure CallAutomation Client API requests.\n */\nexport interface CallAutomationClientOptions extends CommonClientOptions {\n  /**\n   * The identifier of the source of the call for call creating/answering/inviting operation.\n   */\n  sourceIdentity?: CommunicationUserIdentifier;\n}\n\n/**\n * Checks whether the type of a value is CallAutomationClientOptions or not.\n *\n * @param options - The value being checked.\n */\nconst isCallAutomationClientOptions = (options: any): options is CallAutomationClientOptions =>\n  !!options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * A CallAutomationClient represents a Client to the Azure Communication CallAutomation service.\n */\nexport class CallAutomationClient {\n  private readonly callAutomationApiClient: CallAutomationApiClient;\n  private readonly sourceIdentity?: CommunicationUserIdentifierModel;\n  private readonly credential: TokenCredential | KeyCredential;\n  private readonly internalPipelineOptions: InternalPipelineOptions;\n  /**\n   * Initializes a new instance of the CallAutomationClient class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(connectionString: string, options?: CallAutomationClientOptions);\n\n  /**\n   * Initializes a new instance of the CallAutomationClient class using a TokenCredential or KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - TokenCredential or KeyCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  constructor(\n    endpoint: string,\n    credential: TokenCredential | KeyCredential,\n    options?: CallAutomationClientOptions,\n  );\n\n  constructor(\n    connectionStringOrUrl: string,\n    credentialOrOptions?: KeyCredential | TokenCredential | CallAutomationClientOptions,\n    maybeOptions: CallAutomationClientOptions = {},\n  ) {\n    const options = isCallAutomationClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n\n    if (!options?.userAgentOptions) {\n      options.userAgentOptions = {};\n    }\n\n    this.internalPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    const { url, credential } = parseClientArguments(connectionStringOrUrl, credentialOrOptions);\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n\n    this.credential = credential;\n    this.callAutomationApiClient = new CallAutomationApiClient(url, this.internalPipelineOptions);\n    this.callAutomationApiClient.pipeline.addPolicy(authPolicy);\n    this.sourceIdentity = communicationUserIdentifierModelConverter(options.sourceIdentity);\n  }\n\n  /**\n   * Initializes a new instance of CallConnection.\n   * @param callConnectionId - The CallConnection id for the CallConnection instance. (ex: 421CONTOSO-cRD6-4RDc-a078-99dRANDOMf).\n   */\n  public getCallConnection(callConnectionId: string): CallConnection {\n    return new CallConnection(\n      callConnectionId,\n      this.callAutomationApiClient.endpoint,\n      this.credential,\n      this.internalPipelineOptions,\n    );\n  }\n\n  /**\n   * Initializes a new instance of CallRecording.\n   */\n  public getCallRecording(): CallRecording {\n    return new CallRecording(\n      this.callAutomationApiClient.endpoint,\n      this.credential,\n      this.internalPipelineOptions,\n    );\n  }\n\n  /**\n   * Get Source Identity that is used for create and answer call\n   */\n  public getSourceIdentity(): CommunicationUserIdentifier | undefined {\n    return communicationUserIdentifierConverter(this.sourceIdentity);\n  }\n\n  private async createCallInternal(\n    request: CreateCallRequest,\n    options?: CreateCallOptions,\n  ): Promise<CreateCallResult> {\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const {\n      callConnectionId,\n      answeredBy,\n      targets,\n      sourceCallerIdNumber,\n      source,\n      answeredFor,\n      ...result\n    } = await this.callAutomationApiClient.createCall(request, optionsInternal);\n\n    if (callConnectionId) {\n      const callConnectionPropertiesDto: CallConnectionProperties = {\n        ...result,\n        callConnectionId: callConnectionId,\n        source: source ? communicationIdentifierConverter(source) : undefined,\n        answeredby: communicationUserIdentifierConverter(answeredBy),\n        answeredFor: answeredFor ? phoneNumberIdentifierConverter(answeredFor) : undefined,\n        targetParticipants: targets?.map((returnedTarget) =>\n          communicationIdentifierConverter(returnedTarget),\n        ),\n        sourceCallerIdNumber: sourceCallerIdNumber\n          ? phoneNumberIdentifierConverter(sourceCallerIdNumber)\n          : undefined,\n      };\n      const callConnection = new CallConnection(\n        callConnectionId,\n        this.callAutomationApiClient.endpoint,\n        this.credential,\n        this.internalPipelineOptions,\n      );\n      const createCallResult: CreateCallResult = {\n        callConnectionProperties: callConnectionPropertiesDto,\n        callConnection: callConnection,\n      };\n      return createCallResult;\n    }\n    throw \"callConnectionProperties / callConnectionId is missing in createCall result\";\n  }\n\n  /**\n   * Create an outgoing call from source to a target identity.\n   * @param targetParticipant - A single target.\n   * @param callbackUrl - The callback url.\n   * @param options - Additional request options contains createCallConnection api options.\n   */\n  public async createCall(\n    targetParticipant: CallInvite,\n    callbackUrl: string,\n    options: CreateCallOptions = {},\n  ): Promise<CreateCallResult> {\n    const request: CreateCallRequest = {\n      source: this.sourceIdentity,\n      targets: [communicationIdentifierModelConverter(targetParticipant.targetParticipant)],\n      callbackUri: callbackUrl,\n      operationContext: options.operationContext,\n      callIntelligenceOptions: options.callIntelligenceOptions,\n      sourceCallerIdNumber: PhoneNumberIdentifierModelConverter(\n        targetParticipant.sourceCallIdNumber,\n      ),\n      sourceDisplayName: targetParticipant.sourceDisplayName,\n    };\n\n    return this.createCallInternal(request, options);\n  }\n\n  /**\n   * Create an outgoing call from source to a group of targets identities.\n   * @param targetParticipants - A group of targets identities.\n   * @param callbackUrl - The callback url.\n   * @param options - Additional request options contains createCallConnection api options.\n   */\n  public async createGroupCall(\n    targetParticipants: CommunicationIdentifier[],\n    callbackUrl: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options: CreateCallOptions = {},\n  ): Promise<CreateCallResult> {\n    const request: CreateCallRequest = {\n      source: this.sourceIdentity,\n      targets: targetParticipants.map((target) => communicationIdentifierModelConverter(target)),\n      callbackUri: callbackUrl,\n      operationContext: options.operationContext,\n      callIntelligenceOptions: options.callIntelligenceOptions,\n      sourceCallerIdNumber: PhoneNumberIdentifierModelConverter(options.sourceCallIdNumber),\n      sourceDisplayName: options.sourceDisplayName,\n    };\n\n    return this.createCallInternal(request, options);\n  }\n\n  /**\n   * Answer the call.\n   * @param incomingCallContext - The context associated with the call.\n   * @param callbackUrl - The callback url.\n   * @param options - Additional request options contains answerCall api options.\n   */\n  public async answerCall(\n    incomingCallContext: string,\n    callbackUrl: string,\n    options: AnswerCallOptions = {},\n  ): Promise<AnswerCallResult> {\n    const { callIntelligenceOptions, operationContext, ...operationOptions } = options;\n    const request: AnswerCallRequest = {\n      incomingCallContext: incomingCallContext,\n      callIntelligenceOptions: callIntelligenceOptions,\n      operationContext: operationContext,\n      callbackUri: callbackUrl,\n      answeredBy: this.sourceIdentity,\n    };\n    const optionsInternal = {\n      ...operationOptions,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const {\n      callConnectionId,\n      targets,\n      sourceCallerIdNumber,\n      answeredBy,\n      source,\n      answeredFor,\n      ...result\n    } = await this.callAutomationApiClient.answerCall(request, optionsInternal);\n\n    if (callConnectionId) {\n      const callConnectionProperties: CallConnectionProperties = {\n        ...result,\n        callConnectionId: callConnectionId,\n        source: source ? communicationIdentifierConverter(source) : undefined,\n        answeredby: communicationUserIdentifierConverter(answeredBy),\n        answeredFor: answeredFor ? phoneNumberIdentifierConverter(answeredFor) : undefined,\n        targetParticipants: targets?.map((target) => communicationIdentifierConverter(target)),\n        sourceCallerIdNumber: sourceCallerIdNumber\n          ? phoneNumberIdentifierConverter(sourceCallerIdNumber)\n          : undefined,\n      };\n      const callConnection = new CallConnection(\n        callConnectionId,\n        this.callAutomationApiClient.endpoint,\n        this.credential,\n        this.internalPipelineOptions,\n      );\n      const answerCallResult: AnswerCallResult = {\n        callConnectionProperties: callConnectionProperties,\n        callConnection: callConnection,\n      };\n      return answerCallResult;\n    }\n    throw \"callConnectionProperties / callConnectionId is missing in createCall result\";\n  }\n\n  /**\n   * Redirect the call.\n   *\n   * @param incomingCallContext - The context associated with the call.\n   * @param targetParticipant - The target identity to redirect the call to.\n   * @param options - Additional request options contains redirectCall api options.\n   */\n  public async redirectCall(\n    incomingCallContext: string,\n    targetParticipant: CallInvite,\n    options: RedirectCallOptions = {},\n  ): Promise<void> {\n    const request: RedirectCallRequest = {\n      incomingCallContext: incomingCallContext,\n      target: communicationIdentifierModelConverter(targetParticipant.targetParticipant),\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n\n    return this.callAutomationApiClient.redirectCall(request, optionsInternal);\n  }\n\n  /**\n   * Reject the call.\n   *\n   * @param incomingCallContext - The context associated with the call.\n   * @param options - Additional request options contains rejectCall api options.\n   */\n  public async rejectCall(\n    incomingCallContext: string,\n    options: RejectCallOptions = {},\n  ): Promise<void> {\n    const request: RejectCallRequest = {\n      incomingCallContext: incomingCallContext,\n      callRejectReason: options.callRejectReason,\n    };\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n\n    return this.callAutomationApiClient.rejectCall(request, optionsInternal);\n  }\n\n  /**\n   * Create connection to room call.\n   * @param callLocator - Call locator to create connection.\n   * @param callbackUrl - The callback url\n   * @param options - Additional request options contains connect api options.\n   */\n  public async connectCall(\n    callLocator: CallLocator,\n    callbackUrl: string,\n    options: ConnectCallOptions = {},\n  ): Promise<ConnectCallResult> {\n    const connectRequest: ConnectRequest = {\n      callLocator: callLocator,\n      callbackUri: callbackUrl,\n      operationContext: options.operationContext,\n      callIntelligenceOptions: options.callIntelligenceOptions,\n    };\n\n    if (callLocator.kind === \"groupCallLocator\") {\n      connectRequest.callLocator.kind = \"groupCallLocator\";\n      connectRequest.callLocator.groupCallId = callLocator.id;\n    } else if (callLocator.kind === \"roomCallLocator\") {\n      connectRequest.callLocator.kind = \"roomCallLocator\";\n      connectRequest.callLocator.roomId = callLocator.id;\n    } else {\n      connectRequest.callLocator.kind = \"serverCallLocator\";\n      connectRequest.callLocator.serverCallId = callLocator.id;\n    }\n\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n\n    const {\n      callConnectionId,\n      targets,\n      sourceCallerIdNumber,\n      answeredBy,\n      source,\n      answeredFor,\n      ...result\n    } = await this.callAutomationApiClient.connect(connectRequest, optionsInternal);\n\n    if (callConnectionId) {\n      const callConnectionProperties: CallConnectionProperties = {\n        ...result,\n        callConnectionId: callConnectionId,\n        source: source ? communicationIdentifierConverter(source) : undefined,\n        answeredby: answeredBy ? communicationUserIdentifierConverter(answeredBy) : undefined,\n        targetParticipants: targets?.map((target) => communicationIdentifierConverter(target)),\n        answeredFor: answeredFor ? phoneNumberIdentifierConverter(answeredFor) : undefined,\n        sourceCallerIdNumber: sourceCallerIdNumber\n          ? phoneNumberIdentifierConverter(sourceCallerIdNumber)\n          : undefined,\n      };\n      const callConnection = new CallConnection(\n        callConnectionId,\n        this.callAutomationApiClient.endpoint,\n        this.credential,\n        this.internalPipelineOptions,\n      );\n      const connectResult: ConnectCallResult = {\n        callConnectionProperties: callConnectionProperties,\n        callConnection: callConnection,\n      };\n      return connectResult;\n    }\n    throw \"callConnectionProperties / callConnectionId is missing in connect result\";\n  }\n}\n"]}