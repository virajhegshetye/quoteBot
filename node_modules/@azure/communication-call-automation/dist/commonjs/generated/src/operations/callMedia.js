"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CallMediaImpl = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing CallMedia operations. */
class CallMediaImpl {
    /**
     * Initialize a new instance of the class CallMedia class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Plays audio to participants in the call.
     * @param callConnectionId The call connection id.
     * @param playRequest play request payload.
     * @param options The options parameters.
     */
    play(callConnectionId, playRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, playRequest, options }, playOperationSpec);
    }
    /**
     * Cancel all media operations in a call.
     * @param callConnectionId The call connection id
     * @param options The options parameters.
     */
    cancelAllMediaOperations(callConnectionId, options) {
        return this.client.sendOperationRequest({ callConnectionId, options }, cancelAllMediaOperationsOperationSpec);
    }
    /**
     * Recognize media from call.
     * @param callConnectionId The call connection id
     * @param recognizeRequest The media recognize request
     * @param options The options parameters.
     */
    recognize(callConnectionId, recognizeRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, recognizeRequest, options }, recognizeOperationSpec);
    }
    /**
     * Start continuous Dtmf recognition by subscribing to tones.
     * @param callConnectionId The call connection id
     * @param continuousDtmfRecognitionRequest The continuous recognize request
     * @param options The options parameters.
     */
    startContinuousDtmfRecognition(callConnectionId, continuousDtmfRecognitionRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, continuousDtmfRecognitionRequest, options }, startContinuousDtmfRecognitionOperationSpec);
    }
    /**
     * Stop continuous Dtmf recognition by unsubscribing to tones.
     * @param callConnectionId The call connection id
     * @param continuousDtmfRecognitionRequest The continuous recognize request
     * @param options The options parameters.
     */
    stopContinuousDtmfRecognition(callConnectionId, continuousDtmfRecognitionRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, continuousDtmfRecognitionRequest, options }, stopContinuousDtmfRecognitionOperationSpec);
    }
    /**
     * Send dtmf tones.
     * @param callConnectionId The call connection id
     * @param sendDtmfTonesRequest The send dtmf tones request
     * @param options The options parameters.
     */
    sendDtmfTones(callConnectionId, sendDtmfTonesRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, sendDtmfTonesRequest, options }, sendDtmfTonesOperationSpec);
    }
    /**
     * Hold participant from the call using identifier.
     * @param callConnectionId The call connection id.
     * @param holdRequest The participants to be hold from the call.
     * @param options The options parameters.
     */
    hold(callConnectionId, holdRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, holdRequest, options }, holdOperationSpec);
    }
    /**
     * Unhold participants from the call using identifier.
     * @param callConnectionId The call connection id.
     * @param unholdRequest The participants to be hold from the call.
     * @param options The options parameters.
     */
    unhold(callConnectionId, unholdRequest, options) {
        return this.client.sendOperationRequest({ callConnectionId, unholdRequest, options }, unholdOperationSpec);
    }
}
exports.CallMediaImpl = CallMediaImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const playOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:play",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.playRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const cancelAllMediaOperationsOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:cancelAllMediaOperations",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.accept],
    serializer,
};
const recognizeOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:recognize",
    httpMethod: "POST",
    responses: {
        202: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.recognizeRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const startContinuousDtmfRecognitionOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:startContinuousDtmfRecognition",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.continuousDtmfRecognitionRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const stopContinuousDtmfRecognitionOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:stopContinuousDtmfRecognition",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.continuousDtmfRecognitionRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const sendDtmfTonesOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:sendDtmfTones",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: Mappers.SendDtmfTonesResult,
        },
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.sendDtmfTonesRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [
        Parameters.contentType,
        Parameters.accept,
        Parameters.repeatabilityRequestID,
        Parameters.repeatabilityFirstSent,
    ],
    mediaType: "json",
    serializer,
};
const holdOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:hold",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.holdRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const unholdOperationSpec = {
    path: "/calling/callConnections/{callConnectionId}:unhold",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CommunicationErrorResponse,
        },
    },
    requestBody: Parameters.unholdRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.callConnectionId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
//# sourceMappingURL=callMedia.js.map