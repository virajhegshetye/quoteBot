{"version":3,"file":"callMedia.js","sourceRoot":"","sources":["../../src/callMedia.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  PlayRequest,\n  PlaySourceInternal,\n  FileSourceInternal,\n  TextSourceInternal,\n  SsmlSourceInternal,\n  KnownPlaySourceType,\n  RecognizeRequest,\n  KnownRecognizeInputType,\n  RecognizeOptions,\n  DtmfOptions,\n  CallAutomationApiClient,\n  CallAutomationApiClientOptionalParams,\n  ContinuousDtmfRecognitionRequest,\n  SendDtmfTonesRequest,\n  Tone,\n  SpeechOptions,\n  HoldRequest,\n  UnholdRequest,\n} from \"./generated/src/index.js\";\n\nimport { CallMediaImpl } from \"./generated/src/operations/index.js\";\n\nimport {\n  CommunicationIdentifier,\n  createCommunicationAuthPolicy,\n  serializeCommunicationIdentifier,\n} from \"@azure/communication-common\";\n\nimport { FileSource, TextSource, SsmlSource, DtmfTone } from \"./models/models.js\";\nimport {\n  PlayOptions,\n  PlayToAllOptions,\n  CallMediaRecognizeDtmfOptions,\n  CallMediaRecognizeChoiceOptions,\n  ContinuousDtmfRecognitionOptions,\n  SendDtmfTonesOptions,\n  CallMediaRecognizeSpeechOptions,\n  CallMediaRecognizeSpeechOrDtmfOptions,\n  HoldOptions,\n  UnholdOptions,\n} from \"./models/options.js\";\nimport { KeyCredential, TokenCredential } from \"@azure/core-auth\";\nimport { SendDtmfTonesResult } from \"./models/responses.js\";\nimport { randomUUID } from \"@azure/core-util\";\n\n/**\n * CallMedia class represents call media related APIs.\n */\nexport class CallMedia {\n  private readonly callConnectionId: string;\n  private readonly callMedia: CallMediaImpl;\n  private readonly callAutomationApiClient: CallAutomationApiClient;\n  constructor(\n    callConnectionId: string,\n    endpoint: string,\n    credential: KeyCredential | TokenCredential,\n    options?: CallAutomationApiClientOptionalParams,\n  ) {\n    this.callAutomationApiClient = new CallAutomationApiClient(endpoint, options);\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.callAutomationApiClient.pipeline.addPolicy(authPolicy);\n    this.callConnectionId = callConnectionId;\n    this.callMedia = new CallMediaImpl(this.callAutomationApiClient);\n  }\n\n  private createPlaySourceInternal(\n    playSource: FileSource | TextSource | SsmlSource,\n  ): PlaySourceInternal {\n    if (playSource.kind === \"fileSource\") {\n      const fileSource: FileSourceInternal = {\n        uri: playSource.url,\n      };\n      return {\n        kind: KnownPlaySourceType.File,\n        file: fileSource,\n        playSourceCacheId: playSource.playsourcacheid,\n      };\n    } else if (playSource.kind === \"textSource\") {\n      const textSource: TextSourceInternal = {\n        text: playSource.text,\n        sourceLocale: playSource.sourceLocale,\n        voiceKind: playSource.voiceKind,\n        voiceName: playSource.voiceName,\n        customVoiceEndpointId: playSource.customVoiceEndpointId,\n      };\n      return {\n        kind: KnownPlaySourceType.Text,\n        text: textSource,\n        playSourceCacheId: playSource.playsourcacheid,\n      };\n    } else if (playSource.kind === \"ssmlSource\") {\n      const ssmlSource: SsmlSourceInternal = {\n        ssmlText: playSource.ssmlText,\n        customVoiceEndpointId: playSource.customVoiceEndpointId,\n      };\n      return {\n        kind: KnownPlaySourceType.Ssml,\n        ssml: ssmlSource,\n        playSourceCacheId: playSource.playsourcacheid,\n      };\n    }\n    throw new Error(\"Invalid play source\");\n  }\n\n  /**\n   * Play audio to a specific participant.\n   *\n   * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.\n   * @param playTo - The targets to play to.\n   * @param options - Additional attributes for play.\n   */\n  public async play(\n    playSources: (FileSource | TextSource | SsmlSource)[],\n    playTo: CommunicationIdentifier[],\n    options: PlayOptions = { loop: false },\n  ): Promise<void> {\n    const playRequest: PlayRequest = {\n      playSources: playSources.map((source) => this.createPlaySourceInternal(source)),\n      playTo: playTo.map((identifier) => serializeCommunicationIdentifier(identifier)),\n      playOptions: {\n        loop: false,\n      },\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n\n    if (options.loop !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || { loop: false }; // Ensure playOptions is defined\n      playRequest.playOptions.loop = options.loop;\n    }\n    return this.callMedia.play(this.callConnectionId, playRequest, options);\n  }\n\n  /**\n   * Play to all participants.\n   *\n   * @param playSources - A PlaySource representing the sources to play. Currently only single play source per request is supported.\n   * @param options - Additional attributes for play.\n   */\n  public async playToAll(\n    playSources: (FileSource | TextSource | SsmlSource)[],\n    options: PlayToAllOptions = { loop: false },\n  ): Promise<void> {\n    const playRequest: PlayRequest = {\n      playSources: playSources.map((source) => this.createPlaySourceInternal(source)),\n      playTo: [],\n      playOptions: {\n        loop: false,\n      },\n      interruptCallMediaOperation:\n        options.interruptCallMediaOperation !== undefined\n          ? options.interruptCallMediaOperation\n          : false,\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n\n    if (options.loop !== undefined) {\n      playRequest.playOptions = playRequest.playOptions || { loop: false }; // Ensure playOptions is defined\n      playRequest.playOptions.loop = options.loop;\n    }\n    return this.callMedia.play(this.callConnectionId, playRequest, options);\n  }\n\n  private createRecognizeRequest(\n    targetParticipant: CommunicationIdentifier,\n    recognizeOptions:\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n  ): RecognizeRequest {\n    if (recognizeOptions.kind === \"callMediaRecognizeDtmfOptions\") {\n      const dtmfOptionsInternal: DtmfOptions = {\n        interToneTimeoutInSeconds: recognizeOptions.interToneTimeoutInSeconds\n          ? recognizeOptions.interToneTimeoutInSeconds\n          : 2,\n        maxTonesToCollect: recognizeOptions.maxTonesToCollect,\n        stopTones: recognizeOptions.stopDtmfTones,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        dtmfOptions: dtmfOptionsInternal,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Dtmf,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeChoiceOptions\") {\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechLanguage: recognizeOptions.speechLanguage,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n        choices: recognizeOptions.choices,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Choices,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeSpeechOptions\") {\n      const speechOptions: SpeechOptions = {\n        endSilenceTimeoutInMs: recognizeOptions.endSilenceTimeoutInSeconds\n          ? recognizeOptions.endSilenceTimeoutInSeconds * 1000\n          : 2000,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechOptions: speechOptions,\n        speechLanguage: recognizeOptions.speechLanguage,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.Speech,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    } else if (recognizeOptions.kind === \"callMediaRecognizeSpeechOrDtmfOptions\") {\n      const dtmfOptionsInternal: DtmfOptions = {\n        interToneTimeoutInSeconds: recognizeOptions.interToneTimeoutInSeconds\n          ? recognizeOptions.interToneTimeoutInSeconds\n          : 2,\n        maxTonesToCollect: recognizeOptions.maxTonesToCollect,\n        stopTones: recognizeOptions.stopDtmfTones,\n      };\n      const speechOptions: SpeechOptions = {\n        endSilenceTimeoutInMs: recognizeOptions.endSilenceTimeoutInSeconds\n          ? recognizeOptions.endSilenceTimeoutInSeconds * 1000\n          : 2000,\n      };\n      const recognizeOptionsInternal: RecognizeOptions = {\n        interruptPrompt: recognizeOptions.interruptPrompt,\n        initialSilenceTimeoutInSeconds: recognizeOptions.initialSilenceTimeoutInSeconds\n          ? recognizeOptions.initialSilenceTimeoutInSeconds\n          : 5,\n        targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n        speechOptions: speechOptions,\n        dtmfOptions: dtmfOptionsInternal,\n        speechRecognitionModelEndpointId: recognizeOptions.speechRecognitionModelEndpointId,\n      };\n      return {\n        recognizeInputType: KnownRecognizeInputType.SpeechOrDtmf,\n        playPrompt: recognizeOptions.playPrompt\n          ? this.createPlaySourceInternal(recognizeOptions.playPrompt)\n          : undefined,\n        playPrompts:\n          recognizeOptions.playPrompts !== undefined\n            ? recognizeOptions.playPrompts.map((source) => this.createPlaySourceInternal(source))\n            : undefined,\n        interruptCallMediaOperation: recognizeOptions.interruptCallMediaOperation,\n        recognizeOptions: recognizeOptionsInternal,\n        operationContext: recognizeOptions.operationContext,\n        operationCallbackUri: recognizeOptions.operationCallbackUrl,\n      };\n    }\n    throw new Error(\"Invalid recognizeOptions\");\n  }\n\n  /**\n   *  Recognize participant input.\n   *  @deprecated This method signature is deprecated. Please use the new signature with targetParticipant and options params instead, and set maxTonesToCollect in options.\n   *  @param targetParticipant - Target participant.\n   *  @param maxTonesToCollect - Maximum number of DTMF tones to be collected.\n   *  @param options - Different attributes for recognize.\n   * */\n  public async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    maxTonesToCollect: number,\n    options: CallMediaRecognizeDtmfOptions,\n  ): Promise<void>;\n\n  /**\n   *  Recognize participant input.\n   *  @param targetParticipant - Target participant.\n   *  @param options - Different attributes for recognize.\n   * */\n  public async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    options:\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n  ): Promise<void>;\n  async startRecognizing(\n    targetParticipant: CommunicationIdentifier,\n    maxTonesOrOptions:\n      | number\n      | CallMediaRecognizeDtmfOptions\n      | CallMediaRecognizeChoiceOptions\n      | CallMediaRecognizeSpeechOptions\n      | CallMediaRecognizeSpeechOrDtmfOptions,\n    options?: CallMediaRecognizeDtmfOptions,\n  ): Promise<void> {\n    if (typeof maxTonesOrOptions === \"number\" && options) {\n      // Old function signature logic\n      console.warn(\n        \"Deprecated function signature used. Please use the new signature with targetParticipant and options params instead, and set maxTonesToCollect in options.\",\n      );\n      options.maxTonesToCollect = maxTonesOrOptions;\n      return this.callMedia.recognize(\n        this.callConnectionId,\n        this.createRecognizeRequest(targetParticipant, options),\n        {},\n      );\n    } else if (typeof maxTonesOrOptions !== \"number\" && !options) {\n      // New function signature logic\n      return this.callMedia.recognize(\n        this.callConnectionId,\n        this.createRecognizeRequest(targetParticipant, maxTonesOrOptions),\n        {},\n      );\n    }\n    throw new Error(\"Invalid params\");\n  }\n\n  /**\n   * Cancels all the queued media operations.\n   */\n  public async cancelAllOperations(): Promise<void> {\n    return this.callMedia.cancelAllMediaOperations(this.callConnectionId, {});\n  }\n\n  /**\n   * Start continuous Dtmf recognition by subscribing to tones.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for continuous Dtmf recognition.\n   * */\n  public async startContinuousDtmfRecognition(\n    targetParticipant: CommunicationIdentifier,\n    options: ContinuousDtmfRecognitionOptions = {},\n  ): Promise<void> {\n    const continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext,\n    };\n    return this.callMedia.startContinuousDtmfRecognition(\n      this.callConnectionId,\n      continuousDtmfRecognitionRequest,\n      {},\n    );\n  }\n\n  /**\n   * Stop continuous Dtmf recognition by unsubscribing to tones.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for continuous Dtmf recognition.\n   * */\n  public async stopContinuousDtmfRecognition(\n    targetParticipant: CommunicationIdentifier,\n    options: ContinuousDtmfRecognitionOptions = {},\n  ): Promise<void> {\n    const continuousDtmfRecognitionRequest: ContinuousDtmfRecognitionRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n    return this.callMedia.stopContinuousDtmfRecognition(\n      this.callConnectionId,\n      continuousDtmfRecognitionRequest,\n      {},\n    );\n  }\n\n  /**\n   * Send Dtmf tones.\n   * @param tones - List of tones to be sent to target participant.\n   * @param targetParticipant - Target participant.\n   * @param options - Additional attributes for send Dtmf tones.\n   * */\n  public async sendDtmfTones(\n    tones: Tone[] | DtmfTone[],\n    targetParticipant: CommunicationIdentifier,\n    options: SendDtmfTonesOptions = {},\n  ): Promise<SendDtmfTonesResult> {\n    const sendDtmfTonesRequest: SendDtmfTonesRequest = {\n      tones: tones,\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext: options.operationContext,\n      operationCallbackUri: options.operationCallbackUrl,\n    };\n\n    const optionsInternal = {\n      ...options,\n      repeatabilityFirstSent: new Date(),\n      repeatabilityRequestID: randomUUID(),\n    };\n    const result = await this.callMedia.sendDtmfTones(\n      this.callConnectionId,\n      sendDtmfTonesRequest,\n      optionsInternal,\n    );\n    const sendDtmfTonesResult: SendDtmfTonesResult = {\n      ...result,\n    };\n    return sendDtmfTonesResult;\n  }\n\n  /**\n   * Put participant on hold while playing audio.\n   *\n   * @param targetParticipant - The targets to play to.\n   * @param options - Additional attributes for hold participant.\n   */\n  public async hold(\n    targetParticipant: CommunicationIdentifier,\n    options: HoldOptions = {},\n  ): Promise<void> {\n    const holdRequest: HoldRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      playSourceInfo:\n        options.playSource !== undefined\n          ? this.createPlaySourceInternal(options.playSource)\n          : undefined,\n      operationContext:\n        options.operationContext !== undefined ? options.operationContext : undefined,\n      operationCallbackUri:\n        options.operationCallbackUrl !== undefined ? options.operationCallbackUrl : undefined,\n    };\n    return this.callMedia.hold(this.callConnectionId, holdRequest);\n  }\n\n  /**\n   * Remove participant from hold.\n   *\n   * @param targetParticipant - The targets to play to.\n   * @param options - Additional attributes for unhold participant.\n   */\n  public async unhold(\n    targetParticipant: CommunicationIdentifier,\n    options: UnholdOptions = {},\n  ): Promise<void> {\n    const unholdRequest: UnholdRequest = {\n      targetParticipant: serializeCommunicationIdentifier(targetParticipant),\n      operationContext:\n        options.operationContext !== undefined ? options.operationContext : undefined,\n    };\n    return this.callMedia.unhold(this.callConnectionId, unholdRequest);\n  }\n}\n"]}